import asyncio
from datetime import datetime, timedelta
from aiogram import Bot
from app.db import get_pending_reminders, mark_reminder_sent, get_orders, update_order_status
from app.config import Config, REMINDER_TYPES
import logging

logger = logging.getLogger(__name__)

class AutomationService:
    def __init__(self, bot: Bot):
        self.bot = bot
        self.is_running = False
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫–∞—î –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—é"""
        self.is_running = True
        logger.info("–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—è –∑–∞–ø—É—â–µ–Ω–∞")
        
        while self.is_running:
            try:
                await self.process_reminders()
                await self.process_deadline_reminders()
                await self.process_auto_status_updates()
                await asyncio.sleep(Config.AUTO_UPDATE_INTERVAL)
            except Exception as e:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó: {e}")
                await asyncio.sleep(60)  # –ß–µ–∫–∞—î–º–æ —Ö–≤–∏–ª–∏–Ω—É –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ—é —Å–ø—Ä–æ–±–æ—é
    
    async def stop(self):
        """–ó—É–ø–∏–Ω—è—î –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—é"""
        self.is_running = False
        logger.info("–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—è –∑—É–ø–∏–Ω–µ–Ω–∞")
    
    async def process_reminders(self):
        """–û–±—Ä–æ–±–ª—è—î –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è"""
        reminders = get_pending_reminders()
        
        for reminder in reminders:
            try:
                reminder_id, user_id, order_id, reminder_type, scheduled_at, sent_at, message = reminder
                
                # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è
                await self.bot.send_message(user_id, message)
                
                # –ü–æ–∑–Ω–∞—á–∞—î–º–æ —è–∫ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–µ
                mark_reminder_sent(reminder_id)
                
                logger.info(f"–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è {reminder_id} –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_id}")
                
            except Exception as e:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è {reminder_id}: {e}")
    
    async def process_deadline_reminders(self):
        """–°—Ç–≤–æ—Ä—é—î –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—Ä–æ –¥–µ–¥–ª–∞–π–Ω–∏"""
        orders = get_orders(status='confirmed')
        
        for order in orders:
            try:
                order_id, user_id, _, _, _, _, _, _, _, deadline, _, _, _, _, _, _, _, _, _, _ = order
                
                # –ü–∞—Ä—Å–∏–º–æ –¥–µ–¥–ª–∞–π–Ω
                deadline_date = self.parse_deadline(deadline)
                if not deadline_date:
                    continue
                
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è
                days_before = REMINDER_TYPES['deadline_approaching']['days_before']
                reminder_date = deadline_date - timedelta(days=days_before)
                
                if datetime.now().date() == reminder_date:
                    # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è
                    message = REMINDER_TYPES['deadline_approaching']['message']
                    scheduled_at = datetime.now().isoformat()
                    
                    from app.db import add_reminder
                    add_reminder(user_id, order_id, 'deadline_approaching', scheduled_at, message)
                    
                    logger.info(f"–°—Ç–≤–æ—Ä–µ–Ω–æ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—Ä–æ –¥–µ–¥–ª–∞–π–Ω –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è {order_id}")
                
            except Exception as e:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –¥–µ–¥–ª–∞–π–Ω—É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è {order_id}: {e}")
    
    async def process_auto_status_updates(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –æ–Ω–æ–≤–ª—é—î —Å—Ç–∞—Ç—É—Å–∏ –∑–∞–º–æ–≤–ª–µ–Ω—å"""
        orders = get_orders(status='in_progress')
        
        for order in orders:
            try:
                order_id, user_id, _, _, _, _, _, _, _, deadline, _, _, _, _, _, _, _, _, _, _ = order
                
                # –ü–∞—Ä—Å–∏–º–æ –¥–µ–¥–ª–∞–π–Ω
                deadline_date = self.parse_deadline(deadline)
                if not deadline_date:
                    continue
                
                # –Ø–∫—â–æ –¥–µ–¥–ª–∞–π–Ω –º–∏–Ω—É–≤, –∑–º—ñ–Ω—é—î–º–æ —Å—Ç–∞—Ç—É—Å –Ω–∞ "review"
                if datetime.now().date() > deadline_date:
                    update_order_status(order_id, 'review', notes="–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è: –¥–µ–¥–ª–∞–π–Ω –º–∏–Ω—É–≤")
                    
                    # –°–ø–æ–≤—ñ—â–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
                    await self.bot.send_message(
                        user_id,
                        f"‚ÑπÔ∏è –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order_id} –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ –Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É (–¥–µ–¥–ª–∞–π–Ω –º–∏–Ω—É–≤)."
                    )
                    
                    logger.info(f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ —Å—Ç–∞—Ç—É—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è {order_id} –Ω–∞ 'review'")
                
            except Exception as e:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–º—É –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ —Å—Ç–∞—Ç—É—Å—É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è {order_id}: {e}")
    
    def parse_deadline(self, deadline_str):
        """–ü–∞—Ä—Å–∏—Ç—å –¥–µ–¥–ª–∞–π–Ω –∑ —Ä—ñ–∑–Ω–∏—Ö —Ñ–æ—Ä–º–∞—Ç—ñ–≤"""
        try:
            # –°–ø—Ä–æ–±—É—î–º–æ —Ä—ñ–∑–Ω—ñ —Ñ–æ—Ä–º–∞—Ç–∏
            formats = [
                "%Y-%m-%d",
                "%d.%m.%Y",
                "%d/%m/%Y",
                "%d-%m-%Y"
            ]
            
            for fmt in formats:
                try:
                    return datetime.strptime(deadline_str, fmt).date()
                except ValueError:
                    continue
            
            # –Ø–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø–∞—Ä—Å–∏—Ç–∏, —Å–ø—Ä–æ–±—É—î–º–æ –∑–Ω–∞–π—Ç–∏ —á–∏—Å–ª–∞
            import re
            numbers = re.findall(r'\d+', deadline_str)
            if len(numbers) >= 3:
                # –ü—Ä–∏–ø—É—Å–∫–∞—î–º–æ —Ñ–æ—Ä–º–∞—Ç DD.MM.YYYY
                day, month, year = int(numbers[0]), int(numbers[1]), int(numbers[2])
                if year < 100:  # –Ø–∫—â–æ —Ä—ñ–∫ –¥–≤–æ–∑–Ω–∞—á–Ω–∏–π
                    year += 2000
                return datetime(year, month, day).date()
            
            return None
            
        except Exception:
            return None
    
    async def send_auto_response(self, user_id, message_type):
        """–í—ñ–¥–ø—Ä–∞–≤–ª—è—î –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ"""
        auto_responses = {
            'greeting': "üëã –í—ñ—Ç–∞—é! –ß–∏–º –º–æ–∂—É –¥–æ–ø–æ–º–æ–≥—Ç–∏? –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫—É –∫–æ–º–∞–Ω–¥.",
            'pricing': "üí∞ –î–µ—Ç–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ü—ñ–Ω–∏ –º–æ–∂–Ω–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏ –∫–æ–º–∞–Ω–¥–æ—é /prices",
            'deadline': "‚è∞ –¢–µ—Ä–º—ñ–Ω–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–ª–µ–∂–∞—Ç—å –≤—ñ–¥ —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ —Ä–æ–±–æ—Ç–∏. –ó–∞–∑–≤–∏—á–∞–π –≤—ñ–¥ 3 –¥–æ 14 –¥–Ω—ñ–≤.",
            'payment': "üí≥ –û–ø–ª–∞—Ç–∞ –≤—ñ–¥–±—É–≤–∞—î—Ç—å—Å—è —É –¥–≤–∞ –µ—Ç–∞–ø–∏: 50% –ø–µ—Ä–µ–¥–æ–ø–ª–∞—Ç–∏ —Ç–∞ 50% –ø—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è.",
            'quality': "‚úÖ –ú–∏ –≥–∞—Ä–∞–Ω—Ç—É—î–º–æ —è–∫—ñ—Å—Ç—å —Ä–æ–±–æ—Ç–∏ —Ç–∞ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω—ñ –ø—Ä–∞–≤–∫–∏ –ø—Ä–æ—Ç—è–≥–æ–º –≥–∞—Ä–∞–Ω—Ç—ñ–π–Ω–æ–≥–æ –ø–µ—Ä—ñ–æ–¥—É."
        }
        
        if message_type in auto_responses:
            await self.bot.send_message(user_id, auto_responses[message_type])

# –ì–ª–æ–±–∞–ª—å–Ω–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤—ñ—Å—É
automation_service = None

async def start_automation(bot: Bot):
    """–ó–∞–ø—É—Å–∫–∞—î –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—é"""
    global automation_service
    automation_service = AutomationService(bot)
    asyncio.create_task(automation_service.start())

async def stop_automation():
    """–ó—É–ø–∏–Ω—è—î –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—é"""
    global automation_service
    if automation_service:
        await automation_service.stop() 