from aiogram import types, Router, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import Command
from datetime import datetime, timedelta
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardRemove
from app.config import ORDER_TYPE_PRICES, Config, ORDER_STATUSES, SPAM_LIMITS, MAX_FILES_PER_ORDER, ALLOWED_FILE_TYPES
from app.db import add_order, get_promocode, is_promocode_valid, use_promocode, update_order, get_order_by_id, check_spam_protection, add_referral_bonus, get_referrals
from app.utils.validation import validate_topic, validate_subject, validate_deadline, validate_volume, validate_requirements, validate_promocode
import json
import re

router = Router()

class OrderStates(StatesGroup):
    waiting_for_type = State()
    waiting_for_topic = State()
    waiting_for_subject = State()
    waiting_for_deadline = State()
    waiting_for_volume = State()
    waiting_for_requirements = State()
    waiting_for_files = State()
    waiting_for_file_text = State()
    waiting_for_promocode = State()
    waiting_for_confirmation = State()
    editing_order = State()


def calculate_price(data: dict) -> tuple[float, float]:
    """–†–æ–∑—Ä–∞—Ö–æ–≤—É—î –≤–∞—Ä—Ç—ñ—Å—Ç—å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–∞ –æ—Å–Ω–æ–≤—ñ –≤–≤–µ–¥–µ–Ω–∏—Ö –¥–∞–Ω–∏—Ö."""
    order_type = data.get("order_type")
    volume_str = data.get("volume", "0")
    deadline_str = data.get("deadline", "")
    promocode_data = data.get("promocode")

    if not order_type or order_type not in ORDER_TYPE_PRICES:
        return 0.0, 0.0

    price_info = ORDER_TYPE_PRICES[order_type]
    base_price = float(price_info.get("base", 0))
    total_price = base_price

    volume_match = re.search(r'\d+', volume_str)
    volume = int(volume_match.group(0)) if volume_match else 0

    if "per_page" in price_info:
        total_price += volume * float(price_info["per_page"])
    elif "per_work" in price_info:
        total_price += volume * float(price_info["per_work"])

    try:
        # –°–ø—Ä–æ–±–∞ —Ä–æ–∑–ø–∞—Ä—Å–∏—Ç–∏ —Ä—ñ–∑–Ω—ñ —Ñ–æ—Ä–º–∞—Ç–∏ –¥–∞—Ç–∏
        parsed_date = None
        for fmt in ["%d.%m.%Y", "%d/%m/%Y", "%d-%m-%Y"]:
             try:
                 parsed_date = datetime.strptime(deadline_str, fmt)
                 break
             except ValueError:
                 continue
        
        if parsed_date:
            days_to_deadline = (parsed_date - datetime.now()).days
            if days_to_deadline < 3:
                total_price *= 1.5
            elif days_to_deadline < 7:
                total_price *= 1.25
    except TypeError:
        pass

    discount = 0.0
    if promocode_data:
        promo_type = promocode_data[2]
        promo_value = float(promocode_data[3])
        if promo_type == 'percent':
            discount = total_price * (promo_value / 100)
        elif promo_type == 'fixed':
            discount = promo_value

    final_price = total_price - discount
    return max(0, final_price), discount


def get_back_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üîô –ù–∞–∑–∞–¥"), KeyboardButton(text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏")]],
        resize_keyboard=True
    )

def get_main_menu_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üë§ –ú—ñ–π –∫–∞–±—ñ–Ω–µ—Ç"), KeyboardButton(text="üìù –ù–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è")]
        ],
        resize_keyboard=True
    )

def get_progress_bar(current_step, total_steps):
    steps = {
        1: ("üìù", "–¢–∏–ø —Ä–æ–±–æ—Ç–∏"),
        2: ("üìñ", "–¢–µ–º–∞"),
        3: ("üìö", "–ü—Ä–µ–¥–º–µ—Ç"),
        4: ("‚è∞", "–¢–µ—Ä–º—ñ–Ω"),
        5: ("üìä", "–û–±—Å—è–≥"),
        6: ("üìã", "–í–∏–º–æ–≥–∏"),
        7: ("üìé", "–§–∞–π–ª–∏"),
        8: ("üé´", "–ü—Ä–æ–º–æ–∫–æ–¥")
    }
    
    progress_lines = []
    for step_num in range(1, total_steps + 1):
        emoji, text = steps.get(step_num)
        if step_num == current_step:
            progress_lines.append(f"‚ñ∂Ô∏è <b>{emoji} {text}</b> ‚óÄÔ∏è")
        elif step_num < current_step:
            progress_lines.append(f"‚úÖ {emoji} {text}")
        else:
            progress_lines.append(f"‚óΩÔ∏è {emoji} {text}")
    
    progress_display = "\n".join(progress_lines)
    header = "<b>üìù –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è</b>\n"
    return f"{header}\n{progress_display}"

@router.message(Command("order"))
@router.message(F.text == "üìù –ù–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è")
async def order_handler(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    try:
        if not check_spam_protection(message.from_user.id, 'order_creation', 
                                    SPAM_LIMITS['order_creation']['limit'], 
                                    SPAM_LIMITS['order_creation']['window']):
            data = await state.get_data()
            last_info_id = data.get('last_info_message_id')
            if last_info_id:
                try:
                    await message.bot.delete_message(message.chat.id, last_info_id)
                except: pass
            sent = await message.answer("‚ö†Ô∏è –ó–∞–Ω–∞–¥—Ç–æ –±–∞–≥–∞—Ç–æ –∑–∞–º–æ–≤–ª–µ–Ω—å. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
            await state.update_data(last_info_message_id=sent.message_id)
            print(f"[ERROR] /order: user {user_id} - spam protection triggered")
            return
        
        await state.clear()
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text=info['label'], callback_data=f"order_type:{code}")]
                for code, info in ORDER_TYPE_PRICES.items()
            ]
        )
        sent = await message.answer(
            f"{get_progress_bar(1, 8)}\n\n"
            "–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø —Ä–æ–±–æ—Ç–∏:",
            parse_mode="HTML",
            reply_markup=keyboard
        )
        await state.update_data(last_info_message_id=sent.message_id)
        print(f"[INFO] /order: user {user_id} - order menu sent")
    except Exception as e:
        data = await state.get_data()
        last_info_id = data.get('last_info_message_id')
        if last_info_id:
            try:
                await message.bot.delete_message(message.chat.id, last_info_id)
            except: pass
        sent = await message.answer("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.")
        await state.update_data(last_info_message_id=sent.message_id)

@router.callback_query(lambda c: c.data and c.data.startswith('order_type:'))
async def order_type_callback(callback: types.CallbackQuery, state: FSMContext):
    order_type = callback.data.split(':')[1]
    await state.update_data(order_type=order_type)
    
    keyboard = get_back_keyboard()
    await callback.message.delete() # –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–Ω–æ–ø–∫–∞–º–∏
    prompt_message = await callback.message.answer(
        f"{get_progress_bar(2, 8)}\n\n"
        "–í–≤–µ–¥—ñ—Ç—å —Ç–µ–º—É —Ä–æ–±–æ—Ç–∏:",
        parse_mode="HTML",
        reply_markup=keyboard
    )
    await state.update_data(last_bot_message_id=prompt_message.message_id)
    await state.set_state(OrderStates.waiting_for_topic)
    
    # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ —Ç–∞ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ —Ü—ñ–Ω—É
    price, discount = calculate_price(await state.get_data())
    await state.update_data(price=price, discount=discount)
    
    await callback.answer()

@router.message(OrderStates.waiting_for_topic)
async def process_topic(message: types.Message, state: FSMContext):
    data = await state.get_data()
    last_bot_message_id = data.get('last_bot_message_id')
    last_info_id = data.get('last_info_message_id')

    if message.text == "üîô –ù–∞–∑–∞–¥":
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text=info['label'], callback_data=f"order_type:{code}")]
                for code, info in ORDER_TYPE_PRICES.items()
            ]
        )
        if last_info_id:
            try:
                await message.bot.delete_message(message.chat.id, last_info_id)
            except: pass
        sent = await message.answer("–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø —Ä–æ–±–æ—Ç–∏:", reply_markup=keyboard)
        await state.update_data(last_info_message_id=sent.message_id)
        await state.set_state(OrderStates.waiting_for_type)
        return
    
    if message.text == "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏":
        if last_info_id:
            try:
                await message.bot.delete_message(message.chat.id, last_info_id)
            except: pass
        sent = await message.answer("–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=get_main_menu_keyboard())
        await state.update_data(last_info_message_id=sent.message_id)
        await state.clear()
        return
    
    is_valid, error_message = validate_topic(message.text)
    if not is_valid:
        if last_info_id:
            try:
                await message.bot.delete_message(message.chat.id, last_info_id)
            except: pass
        try:
            await message.delete()
        except: pass
        sent = await message.answer(f"‚ö†Ô∏è {error_message}")
        await state.update_data(last_info_message_id=sent.message_id)
        return
    
    if last_bot_message_id:
        try:
            await message.bot.delete_message(message.chat.id, last_bot_message_id)
        except: pass
    try:
        await message.delete()
    except: pass
    
    await state.update_data(topic=message.text)
    keyboard = get_back_keyboard()
    prompt_message = await message.answer(
        f"{get_progress_bar(3, 8)}\n\n"
        "–í–≤–µ–¥—ñ—Ç—å –ø—Ä–µ–¥–º–µ—Ç:",
        parse_mode="HTML",
        reply_markup=keyboard
    )
    await state.update_data(last_bot_message_id=prompt_message.message_id)
    await state.set_state(OrderStates.waiting_for_subject)

@router.message(OrderStates.waiting_for_subject)
async def process_subject(message: types.Message, state: FSMContext):
    data = await state.get_data()
    last_bot_message_id = data.get('last_bot_message_id')
    last_info_id = data.get('last_info_message_id')

    if message.text == "üîô –ù–∞–∑–∞–¥":
        if last_info_id:
            try:
                await message.bot.delete_message(message.chat.id, last_info_id)
            except: pass
        if last_bot_message_id:
            try:
                await message.bot.delete_message(message.chat.id, last_bot_message_id)
            except: pass
        try:
            await message.delete()
        except: pass
        await state.set_state(OrderStates.waiting_for_topic)
        keyboard = get_back_keyboard()
        sent = await message.answer("–í–≤–µ–¥—ñ—Ç—å —Ç–µ–º—É —Ä–æ–±–æ—Ç–∏:", reply_markup=keyboard)
        await state.update_data(last_bot_message_id=sent.message_id)
        return
    
    if message.text == "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏":
        if last_info_id:
            try:
                await message.bot.delete_message(message.chat.id, last_info_id)
            except: pass
        if last_bot_message_id:
            try:
                await message.bot.delete_message(message.chat.id, last_bot_message_id)
            except: pass
        try:
            await message.delete()
        except: pass
        sent = await message.answer("–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=get_main_menu_keyboard())
        await state.update_data(last_info_message_id=sent.message_id)
        await state.clear()
        return
    
    is_valid, error_message = validate_subject(message.text)
    if not is_valid:
        if last_info_id:
            try:
                await message.bot.delete_message(message.chat.id, last_info_id)
            except: pass
        try:
            await message.delete()
        except: pass
        sent = await message.answer(f"‚ö†Ô∏è {error_message}")
        await state.update_data(last_info_message_id=sent.message_id)
        return
        
    if last_bot_message_id:
        try:
            await message.bot.delete_message(message.chat.id, last_bot_message_id)
        except: pass
    try:
        await message.delete()
    except: pass

    await state.update_data(subject=message.text)
    keyboard = get_back_keyboard()
    prompt_message = await message.answer(
        f"{get_progress_bar(4, 8)}\n\n"
        "–í–≤–µ–¥—ñ—Ç—å —Ç–µ—Ä–º—ñ–Ω –≤–∏–∫–æ–Ω–∞–Ω–Ω—è (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 7 –¥–Ω—ñ–≤, 2 —Ç–∏–∂–Ω—ñ):",
        parse_mode="HTML",
        reply_markup=keyboard
    )
    await state.update_data(last_bot_message_id=prompt_message.message_id)
    await state.set_state(OrderStates.waiting_for_deadline)

@router.message(OrderStates.waiting_for_deadline)
async def process_deadline(message: types.Message, state: FSMContext):
    data = await state.get_data()
    last_bot_message_id = data.get('last_bot_message_id')
    last_info_id = data.get('last_info_message_id')

    if message.text == "üîô –ù–∞–∑–∞–¥":
        if last_info_id:
            try:
                await message.bot.delete_message(message.chat.id, last_info_id)
            except: pass
        if last_bot_message_id:
            try:
                await message.bot.delete_message(message.chat.id, last_bot_message_id)
            except: pass
        try:
            await message.delete()
        except: pass
        await state.set_state(OrderStates.waiting_for_subject)
        keyboard = get_back_keyboard()
        sent = await message.answer("–í–≤–µ–¥—ñ—Ç—å –ø—Ä–µ–¥–º–µ—Ç:", reply_markup=keyboard)
        await state.update_data(last_bot_message_id=sent.message_id)
        return
    
    if message.text == "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏":
        if last_info_id:
            try:
                await message.bot.delete_message(message.chat.id, last_info_id)
            except: pass
        if last_bot_message_id:
            try:
                await message.bot.delete_message(message.chat.id, last_bot_message_id)
            except: pass
        try:
            await message.delete()
        except: pass
        sent = await message.answer("–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=get_main_menu_keyboard())
        await state.update_data(last_info_message_id=sent.message_id)
        await state.clear()
        return
    
    is_valid, error_message = validate_deadline(message.text)
    if not is_valid:
        if last_info_id:
            try:
                await message.bot.delete_message(message.chat.id, last_info_id)
            except: pass
        try:
            await message.delete()
        except: pass
        sent = await message.answer(f"‚ö†Ô∏è {error_message}")
        await state.update_data(last_info_message_id=sent.message_id)
        return

    if last_bot_message_id:
        try:
            await message.bot.delete_message(message.chat.id, last_bot_message_id)
        except: pass
    try:
        await message.delete()
    except: pass
    
    await state.update_data(deadline=message.text)

    # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ —Ç–∞ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ —Ü—ñ–Ω—É
    price, discount = calculate_price(await state.get_data())
    await state.update_data(price=price, discount=discount)

    keyboard = get_back_keyboard()
    prompt_message = await message.answer(
        f"{get_progress_bar(5, 8)}\n\n"
        "–í–≤–µ–¥—ñ—Ç—å –æ–±—Å—è–≥ —Ä–æ–±–æ—Ç–∏ (–∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å—Ç–æ—Ä—ñ–Ω–æ–∫ –∞–±–æ —Ä–æ–±—ñ—Ç):",
        parse_mode="HTML",
        reply_markup=keyboard
    )
    await state.update_data(last_bot_message_id=prompt_message.message_id)
    await state.set_state(OrderStates.waiting_for_volume)

@router.message(OrderStates.waiting_for_volume)
async def process_volume(message: types.Message, state: FSMContext):
    data = await state.get_data()
    last_bot_message_id = data.get('last_bot_message_id')
    last_info_id = data.get('last_info_message_id')

    if message.text == "üîô –ù–∞–∑–∞–¥":
        if last_info_id:
            try:
                await message.bot.delete_message(message.chat.id, last_info_id)
            except: pass
        if last_bot_message_id:
            try:
                await message.bot.delete_message(message.chat.id, last_bot_message_id)
            except: pass
        try:
            await message.delete()
        except: pass
        await state.set_state(OrderStates.waiting_for_deadline)
        keyboard = get_back_keyboard()
        sent = await message.answer("–í–≤–µ–¥—ñ—Ç—å —Ç–µ—Ä–º—ñ–Ω –≤–∏–∫–æ–Ω–∞–Ω–Ω—è:", reply_markup=keyboard)
        await state.update_data(last_bot_message_id=sent.message_id)
        return
    
    if message.text == "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏":
        if last_info_id:
            try:
                await message.bot.delete_message(message.chat.id, last_info_id)
            except: pass
        if last_bot_message_id:
            try:
                await message.bot.delete_message(message.chat.id, last_bot_message_id)
            except: pass
        try:
            await message.delete()
        except: pass
        sent = await message.answer("–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=get_main_menu_keyboard())
        await state.update_data(last_info_message_id=sent.message_id)
        await state.clear()
        return
    
    is_valid, error_message = validate_volume(message.text)
    if not is_valid:
        if last_info_id:
            try:
                await message.bot.delete_message(message.chat.id, last_info_id)
            except: pass
        try:
            await message.delete()
        except: pass
        sent = await message.answer(f"‚ö†Ô∏è {error_message}")
        await state.update_data(last_info_message_id=sent.message_id)
        return

    if last_bot_message_id:
        try:
            await message.bot.delete_message(message.chat.id, last_bot_message_id)
        except: pass
    try:
        await message.delete()
    except: pass
    
    await state.update_data(volume=message.text)
    
    # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ —Ç–∞ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ —Ü—ñ–Ω—É
    price, discount = calculate_price(await state.get_data())
    await state.update_data(price=price, discount=discount)
    
    keyboard = get_back_keyboard()
    prompt_message = await message.answer(
        f"{get_progress_bar(6, 8)}\n\n"
        "–í–≤–µ–¥—ñ—Ç—å –≤–∏–º–æ–≥–∏ –¥–æ —Ä–æ–±–æ—Ç–∏:",
        parse_mode="HTML",
        reply_markup=keyboard
    )
    await state.update_data(last_bot_message_id=prompt_message.message_id)
    await state.set_state(OrderStates.waiting_for_requirements)

@router.message(OrderStates.waiting_for_requirements)
async def process_requirements(message: types.Message, state: FSMContext):
    data = await state.get_data()
    last_bot_message_id = data.get('last_bot_message_id')
    last_info_id = data.get('last_info_message_id')

    if message.text == "üîô –ù–∞–∑–∞–¥":
        if last_info_id:
            try:
                await message.bot.delete_message(message.chat.id, last_info_id)
            except: pass
        if last_bot_message_id:
            try:
                await message.bot.delete_message(message.chat.id, last_bot_message_id)
            except: pass
        try:
            await message.delete()
        except: pass
        await state.set_state(OrderStates.waiting_for_volume)
        keyboard = get_back_keyboard()
        sent = await message.answer("–í–≤–µ–¥—ñ—Ç—å –æ–±—Å—è–≥ —Ä–æ–±–æ—Ç–∏:", reply_markup=keyboard)
        await state.update_data(last_bot_message_id=sent.message_id)
        return
    
    if message.text == "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏":
        if last_info_id:
            try:
                await message.bot.delete_message(message.chat.id, last_info_id)
            except: pass
        if last_bot_message_id:
            try:
                await message.bot.delete_message(message.chat.id, last_bot_message_id)
            except: pass
        try:
            await message.delete()
        except: pass
        sent = await message.answer("–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=get_main_menu_keyboard())
        await state.update_data(last_info_message_id=sent.message_id)
        await state.clear()
        return
    
    is_valid, error_message = validate_requirements(message.text)
    if not is_valid:
        if last_info_id:
            try:
                await message.bot.delete_message(message.chat.id, last_info_id)
            except: pass
        try:
            await message.delete()
        except: pass
        sent = await message.answer(f"‚ö†Ô∏è {error_message}")
        await state.update_data(last_info_message_id=sent.message_id)
        return

    if last_bot_message_id:
        try:
            await message.bot.delete_message(message.chat.id, last_bot_message_id)
        except: pass
    try:
        await message.delete()
    except: pass
    
    await state.update_data(requirements=message.text)
    
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìé –î–æ–¥–∞—Ç–∏ —Ñ–∞–π–ª–∏"), KeyboardButton(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏")],
            [KeyboardButton(text="üîô –ù–∞–∑–∞–¥"), KeyboardButton(text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏")]
        ],
        resize_keyboard=True
    )
    prompt_message = await message.answer(
        f"{get_progress_bar(7, 8)}\n\n"
        "–ë–∞–∂–∞—î—Ç–µ –¥–æ–¥–∞—Ç–∏ —Ñ–∞–π–ª–∏ –¥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è?",
        parse_mode="HTML",
        reply_markup=keyboard
    )
    await state.update_data(last_bot_message_id=prompt_message.message_id)
    await state.set_state(OrderStates.waiting_for_files)

@router.message(OrderStates.waiting_for_files)
async def process_files_choice(message: types.Message, state: FSMContext):
    data = await state.get_data()
    last_bot_message_id = data.get('last_bot_message_id')
    last_info_id = data.get('last_info_message_id')

    if message.text == "üîô –ù–∞–∑–∞–¥":
        if last_info_id:
            try:
                await message.bot.delete_message(message.chat.id, last_info_id)
            except: pass
        if last_bot_message_id:
            try:
                await message.bot.delete_message(message.chat.id, last_bot_message_id)
            except: pass
        try:
            await message.delete()
        except: pass
        await state.set_state(OrderStates.waiting_for_requirements)
        keyboard = get_back_keyboard()
        sent = await message.answer("–í–≤–µ–¥—ñ—Ç—å –≤–∏–º–æ–≥–∏ –¥–æ —Ä–æ–±–æ—Ç–∏:", reply_markup=keyboard)
        await state.update_data(last_bot_message_id=sent.message_id)
        return
    
    if message.text == "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏":
        if last_info_id:
            try:
                await message.bot.delete_message(message.chat.id, last_info_id)
            except: pass
        if last_bot_message_id:
            try:
                await message.bot.delete_message(message.chat.id, last_bot_message_id)
            except: pass
        try:
            await message.delete()
        except: pass
        sent = await message.answer("–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=get_main_menu_keyboard())
        await state.update_data(last_info_message_id=sent.message_id)
        await state.clear()
        return
    
    if last_bot_message_id:
        try:
            await message.bot.delete_message(message.chat.id, last_bot_message_id)
        except: pass
    try:
        await message.delete()
    except: pass

    if message.text == "üìé –î–æ–¥–∞—Ç–∏ —Ñ–∞–π–ª–∏":
        await state.update_data(files=[])
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ"), KeyboardButton(text="üîô –ù–∞–∑–∞–¥")],
                [KeyboardButton(text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏")]
            ],
            resize_keyboard=True
        )
        prompt_message = await message.answer(
            "–ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–∞–π–ª–∏ (–¥–æ 10 —Ñ–∞–π–ª—ñ–≤, –º–∞–∫—Å–∏–º—É–º 20MB –∫–æ–∂–µ–Ω).\n"
            "–ü—ñ–¥—Ç—Ä–∏–º—É—é—Ç—å—Å—è: PDF, DOC, DOCX, TXT, JPG, PNG, GIF",
            reply_markup=keyboard
        )
        await state.update_data(last_bot_message_id=prompt_message.message_id)
        await state.set_state(OrderStates.waiting_for_file_text)
    elif message.text == "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏":
        await state.update_data(files=[])
        await go_to_promocode_step(message, state)


@router.message(OrderStates.waiting_for_file_text, F.document | F.photo | F.video)
async def process_file_upload(message: types.Message, state: FSMContext):
    data = await state.get_data()
    files = data.get('files', [])
    
    try:
        await message.delete()
    except:
        pass

    if len(files) >= MAX_FILES_PER_ORDER:
        sent = await message.answer(f"‚ö†Ô∏è –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ñ–∞–π–ª—ñ–≤: {MAX_FILES_PER_ORDER}")
        # Store sent message id to delete it later
        temp_messages = data.get('temp_messages', [])
        temp_messages.append(sent.message_id)
        await state.update_data(temp_messages=temp_messages)
        return
    
    file_id = None
    file_size = None
    file_type = None
    if message.document:
        file_id = message.document.file_id
        file_size = message.document.file_size
        file_type = message.document.mime_type
    elif message.photo:
        file_id = message.photo[-1].file_id
        file_size = getattr(message.photo[-1], 'file_size', None)
        file_type = "image/jpeg"
    elif message.video:
        file_id = message.video.file_id
        file_size = message.video.file_size
        file_type = message.video.mime_type
    
    if file_size is not None and file_size > Config.MAX_FILE_SIZE:
        sent = await message.answer("‚ö†Ô∏è –§–∞–π–ª –∑–∞–Ω–∞–¥—Ç–æ –≤–µ–ª–∏–∫–∏–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π —Ä–æ–∑–º—ñ—Ä: 20MB")
        temp_messages = data.get('temp_messages', [])
        temp_messages.append(sent.message_id)
        await state.update_data(temp_messages=temp_messages)
        return
    
    if file_type not in ALLOWED_FILE_TYPES:
        sent = await message.answer("‚ö†Ô∏è –ù–µ–ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω–∏–π —Ç–∏–ø —Ñ–∞–π–ª—É")
        temp_messages = data.get('temp_messages', [])
        temp_messages.append(sent.message_id)
        await state.update_data(temp_messages=temp_messages)
        return
    
    files.append(file_id)
    await state.update_data(files=files)
    
    sent = await message.answer(f"‚úÖ –§–∞–π–ª –¥–æ–¥–∞–Ω–æ! ({len(files)}/{MAX_FILES_PER_ORDER})")
    temp_messages = data.get('temp_messages', [])
    temp_messages.append(sent.message_id)
    await state.update_data(temp_messages=temp_messages)

@router.message(OrderStates.waiting_for_file_text)
async def process_file_text(message: types.Message, state: FSMContext):
    data = await state.get_data()
    last_bot_message_id = data.get('last_bot_message_id')
    last_info_id = data.get('last_info_message_id')
    chat_id = message.chat.id
    bot = message.bot

    # Delete temp messages (e.g., "File added", "File too large")
    temp_messages = data.get('temp_messages', [])
    for msg_id in temp_messages:
        try:
            await bot.delete_message(chat_id, msg_id)
        except:
            pass
    await state.update_data(temp_messages=[])

    try:
        await message.delete()
    except:
        pass

    if message.text == "‚úÖ –ì–æ—Ç–æ–≤–æ":
        if last_bot_message_id:
            try:
                await bot.delete_message(chat_id, last_bot_message_id)
            except:
                pass
        if len(data.get('files', [])) == 0:
            keyboard = ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="‚úÖ –ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –±–µ–∑ —Ñ–∞–π–ª—ñ–≤")],
                    [KeyboardButton(text="üìé –î–æ–¥–∞—Ç–∏ —Ñ–∞–π–ª–∏"), KeyboardButton(text="üîô –ù–∞–∑–∞–¥")],
                    [KeyboardButton(text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏")]
                ],
                resize_keyboard=True
            )
            if last_info_id:
                try:
                    await bot.delete_message(chat_id, last_info_id)
                except: pass
            sent = await bot.send_message(
                chat_id,
                "–í–∏ –Ω–µ –¥–æ–¥–∞–ª–∏ –∂–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª—É. –ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –±–µ–∑ —Ñ–∞–π–ª—ñ–≤?",
                reply_markup=keyboard
            )
            await state.update_data(last_info_message_id=sent.message_id)
            return
        await go_to_promocode_step(message, state)
    elif message.text == "‚úÖ –ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –±–µ–∑ —Ñ–∞–π–ª—ñ–≤":
        if last_bot_message_id:
            try:
                await bot.delete_message(chat_id, last_bot_message_id)
            except:
                pass
        await go_to_promocode_step(message, state)
    elif message.text == "üîô –ù–∞–∑–∞–¥":
        if last_info_id:
            try:
                await bot.delete_message(chat_id, last_info_id)
            except: pass
        if last_bot_message_id:
            try:
                await bot.delete_message(chat_id, last_bot_message_id)
            except: pass
        await state.set_state(OrderStates.waiting_for_requirements)
        keyboard = get_back_keyboard()
        sent = await bot.send_message(chat_id, "–í–≤–µ–¥—ñ—Ç—å –≤–∏–º–æ–≥–∏ –¥–æ —Ä–æ–±–æ—Ç–∏:", reply_markup=keyboard)
        await state.update_data(last_bot_message_id=sent.message_id)
    elif message.text == "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏":
        if last_info_id:
            try:
                await bot.delete_message(chat_id, last_info_id)
            except: pass
        if last_bot_message_id:
            try:
                await bot.delete_message(chat_id, last_bot_message_id)
            except: pass
        sent = await bot.send_message(chat_id, "–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=get_main_menu_keyboard())
        await state.update_data(last_info_message_id=sent.message_id)
        await state.clear()
    else:
        if last_info_id:
            try:
                await bot.delete_message(chat_id, last_info_id)
            except: pass
        sent = await bot.send_message(chat_id, "–ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–∞–π–ª –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ì–æ—Ç–æ–≤–æ'")
        await state.update_data(last_info_message_id=sent.message_id)


async def go_to_promocode_step(message: types.Message, state: FSMContext):
    data = await state.get_data()
    last_bot_message_id = data.get('last_bot_message_id')

    if last_bot_message_id:
        try:
            await message.bot.delete_message(message.chat.id, last_bot_message_id)
        except: pass
    try:
        await message.delete()
    except: pass

    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚è≠Ô∏è –ë–µ–∑ –ø—Ä–æ–º–æ–∫–æ–¥—É")],
            [KeyboardButton(text="üîô –ù–∞–∑–∞–¥"), KeyboardButton(text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏")]
        ],
        resize_keyboard=True
    )
    prompt_message = await message.answer(
        f"{get_progress_bar(8, 8)}\n\n"
        "–í–≤–µ–¥—ñ—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥ (—è–∫—â–æ —î):",
        parse_mode="HTML",
        reply_markup=keyboard
    )
    await state.update_data(last_bot_message_id=prompt_message.message_id)
    await state.set_state(OrderStates.waiting_for_promocode)


@router.message(OrderStates.waiting_for_promocode)
async def process_promocode_input(message: types.Message, state: FSMContext):
    data = await state.get_data()
    last_bot_message_id = data.get('last_bot_message_id')
    last_info_id = data.get('last_info_message_id')
    bot = message.bot
    chat_id = message.chat.id

    try:
        await message.delete()
    except: pass

    if message.text == "üîô –ù–∞–∑–∞–¥":
        if last_info_id:
            try:
                await bot.delete_message(chat_id, last_info_id)
            except: pass
        if last_bot_message_id:
            try:
                await bot.delete_message(chat_id, last_bot_message_id)
            except: pass
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üìé –î–æ–¥–∞—Ç–∏ —Ñ–∞–π–ª–∏"), KeyboardButton(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏")],
                [KeyboardButton(text="üîô –ù–∞–∑–∞–¥"), KeyboardButton(text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏")]
            ],
            resize_keyboard=True
        )
        prompt_message = await bot.send_message(chat_id,
            f"{get_progress_bar(7, 8)}\n\n"
            "–ë–∞–∂–∞—î—Ç–µ –¥–æ–¥–∞—Ç–∏ —Ñ–∞–π–ª–∏ –¥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è?",
            parse_mode="HTML",
            reply_markup=keyboard
        )
        await state.update_data(last_info_message_id=prompt_message.message_id)
        await state.set_state(OrderStates.waiting_for_files)
        return
    
    if message.text == "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏":
        if last_info_id:
            try:
                await bot.delete_message(chat_id, last_info_id)
            except: pass
        if last_bot_message_id:
            try:
                await bot.delete_message(chat_id, last_bot_message_id)
            except: pass
        sent = await bot.send_message(chat_id, "–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=get_main_menu_keyboard())
        await state.update_data(last_info_message_id=sent.message_id)
        await state.clear()
        return
    
    if message.text == "‚è≠Ô∏è –ë–µ–∑ –ø—Ä–æ–º–æ–∫–æ–¥—É":
        await state.update_data(promocode=None, discount=0)
        # –û–Ω–æ–≤–ª—é—î–º–æ —Ü—ñ–Ω—É –±–µ–∑ –ø—Ä–æ–º–æ–∫–æ–¥—É
        data = await state.get_data()
        price, _ = calculate_price(data)
        await state.update_data(price=price)
        await show_order_summary(message, state)
        return
    
    promocode = message.text.strip().upper()
    is_valid, error_message = validate_promocode(promocode)
    if not is_valid:
        if last_info_id:
            try:
                await bot.delete_message(chat_id, last_info_id)
            except: pass
        prompt_message = await bot.send_message(chat_id, f"‚ö†Ô∏è {error_message}")
        await state.update_data(last_info_message_id=prompt_message.message_id)
        return

    promo_data = get_promocode(promocode)
    
    if not promo_data or not is_promocode_valid(promo_data[0]):
        if last_bot_message_id:
            try:
                await bot.delete_message(chat_id, last_bot_message_id)
            except: pass
        if last_info_id:
            try:
                await bot.delete_message(chat_id, last_info_id)
            except: pass
        prompt_message = await bot.send_message(chat_id, "‚ö†Ô∏è –ù–µ–≤—ñ—Ä–Ω–∏–π –∞–±–æ –Ω–µ–¥—ñ–π—Å–Ω–∏–π –ø—Ä–æ–º–æ–∫–æ–¥. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ë–µ–∑ –ø—Ä–æ–º–æ–∫–æ–¥—É'")
        await state.update_data(last_bot_message_id=prompt_message.message_id)
        return
    
    await state.update_data(promocode=promo_data)
    
    # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ —Ü—ñ–Ω—É –∑—ñ –∑–Ω–∏–∂–∫–æ—é
    data = await state.get_data()
    price, discount = calculate_price(data)
    await state.update_data(price=price, discount=discount)

    await show_order_summary(message, state)


async def get_summary_text_and_keyboard(state: FSMContext):
    """–ì–æ—Ç—É—î —Ç–µ–∫—Å—Ç —Ç–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –ø—ñ–¥—Å—É–º–∫—É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è."""
    data = await state.get_data()
    summary = f"""
üìã <b>–ü—ñ–¥—Å—É–º–æ–∫ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:</b>

üìù <b>–¢–∏–ø —Ä–æ–±–æ—Ç–∏:</b> {ORDER_TYPE_PRICES.get(data.get('order_type'), {}).get('label', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}
üìñ <b>–¢–µ–º–∞:</b> {data.get('topic', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}
üìö <b>–ü—Ä–µ–¥–º–µ—Ç:</b> {data.get('subject', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}
‚è∞ <b>–¢–µ—Ä–º—ñ–Ω:</b> {data.get('deadline', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}
üìä <b>–û–±—Å—è–≥:</b> {data.get('volume', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}
üìã <b>–í–∏–º–æ–≥–∏:</b> {data.get('requirements', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}
üìé <b>–§–∞–π–ª–∏:</b> {len(data.get('files', []))} —à—Ç.

üí∞ <b>–í–∞—Ä—Ç—ñ—Å—Ç—å:</b> {data.get('price', 0) + data.get('discount', 0):.2f} –≥—Ä–Ω
üé´ <b>–ó–Ω–∏–∂–∫–∞:</b> {data.get('discount', 0):.2f} –≥—Ä–Ω
üí≥ <b>–î–æ —Å–ø–ª–∞—Ç–∏:</b> {data.get('price', 0):.2f} –≥—Ä–Ω
"""
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", callback_data="confirm_order")],
            [InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏", callback_data="edit_order")],
            [InlineKeyboardButton(text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="cancel_order")]
        ]
    )
    
    text_with_action = f"{summary}\n\n–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:"
    return text_with_action, keyboard

async def show_order_summary(message: types.Message, state: FSMContext, should_edit: bool = False):
    data = await state.get_data()
    last_info_id = data.get('last_info_message_id')
    last_bot_message_id = data.get('last_bot_message_id')
    
    # Delete previous messages
    if last_info_id and (not hasattr(message, 'message_id') or last_info_id != message.message_id):
        try:
            await message.bot.delete_message(message.chat.id, last_info_id)
        except: pass
    if last_bot_message_id:
        try:
            await message.bot.delete_message(message.chat.id, last_bot_message_id)
        except: pass

    if not should_edit:
        try:
            await message.delete()
        except: pass

    text_with_action, keyboard = await get_summary_text_and_keyboard(state)
    
    if should_edit:
        try:
            await message.edit_text(
                text_with_action, 
                parse_mode="HTML", 
                reply_markup=keyboard
            )
        except Exception: # If editing fails (e.g., message too old), send a new one
            sent = await message.answer(
                text_with_action,
                parse_mode="HTML",
                reply_markup=keyboard
            )
            await state.update_data(last_info_message_id=sent.message_id)
    else:
        sent = await message.answer(
            text_with_action,
            parse_mode="HTML",
            reply_markup=keyboard
        )
        await state.update_data(last_info_message_id=sent.message_id)

    await state.set_state(OrderStates.waiting_for_confirmation)

@router.callback_query(OrderStates.waiting_for_confirmation, lambda c: c.data == "confirm_order")
async def confirm_order_callback(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    
    order_id = add_order(
        user_id=callback.from_user.id,
        first_name=callback.from_user.first_name,
        username=callback.from_user.username,
        phone_number="",
        type_label=ORDER_TYPE_PRICES[data['order_type']]['label'],
        order_type=data['order_type'],
        topic=data['topic'],
        subject=data['subject'],
        deadline=data['deadline'],
        volume=data['volume'],
        requirements=data['requirements'],
        price=data['price'],
        files=data.get('files', [])
    )
    
    if data.get('promocode'):
        use_promocode(data['promocode'][0], callback.from_user.id, order_id, data['discount'])
    
    referrals = get_referrals(callback.from_user.id)
    if referrals and data['price'] >= Config.REFERRAL_MIN_ORDER_AMOUNT:
        for ref in referrals:
            bonus_amount = data['price'] * Config.REFERRAL_BONUS_PERCENT // 100
            add_referral_bonus(ref[0], callback.from_user.id, order_id, bonus_amount)
    
    await callback.message.answer(
        f"‚úÖ <b>–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ!</b>\n\n"
        f"–ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –∑–≤'—è–∂–µ—Ç—å—Å—è –∑ –≤–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º.\n"
        f"–î–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /cabinet",
        parse_mode="HTML",
        reply_markup=get_main_menu_keyboard()
    )
    await state.clear()
    await callback.answer()

@router.callback_query(OrderStates.waiting_for_confirmation, lambda c: c.data == "edit_order")
async def edit_order_callback(callback: types.CallbackQuery, state: FSMContext):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üìù –¢–µ–º–∞", callback_data="edit_topic")],
            [InlineKeyboardButton(text="üìö –ü—Ä–µ–¥–º–µ—Ç", callback_data="edit_subject")],
            [InlineKeyboardButton(text="‚è∞ –¢–µ—Ä–º—ñ–Ω", callback_data="edit_deadline")],
            [InlineKeyboardButton(text="üìä –û–±—Å—è–≥", callback_data="edit_volume")],
            [InlineKeyboardButton(text="üìã –í–∏–º–æ–≥–∏", callback_data="edit_requirements")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_summary")]
        ]
    )
    
    await callback.message.edit_text(
        "‚úèÔ∏è –©–æ –±–∞–∂–∞—î—Ç–µ —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏?",
        reply_markup=keyboard
    )
    await state.set_state(OrderStates.editing_order)
    await callback.answer()

@router.callback_query(OrderStates.editing_order, lambda c: c.data == "back_to_summary")
async def back_to_summary_callback(callback: types.CallbackQuery, state: FSMContext):
    await show_order_summary(callback.message, state, should_edit=True)
    await callback.answer()

@router.callback_query(OrderStates.waiting_for_confirmation, lambda c: c.data == "cancel_order")
async def cancel_order_callback(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text("‚ùå –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
    await callback.message.answer("–û–±–µ—Ä—ñ—Ç—å –Ω–∞—Å—Ç—É–ø–Ω—É –¥—ñ—é:", reply_markup=get_main_menu_keyboard())
    await callback.answer()

@router.callback_query(OrderStates.editing_order, lambda c: c.data.startswith("edit_"))
async def edit_field_callback(callback: types.CallbackQuery, state: FSMContext):
    field = callback.data.split("_")[1]
    field_names = {
        "topic": "—Ç–µ–º—É",
        "subject": "–ø—Ä–µ–¥–º–µ—Ç",
        "deadline": "—Ç–µ—Ä–º—ñ–Ω",
        "volume": "–æ–±—Å—è–≥",
        "requirements": "–≤–∏–º–æ–≥–∏"
    }
    await state.update_data(editing_field=field)
    keyboard = get_back_keyboard()
    
    # Delete the summary message before asking for new input
    await callback.message.delete()

    prompt_message = await callback.message.answer(f"–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π {field_names[field]}:", reply_markup=keyboard)
    await state.update_data(last_edit_message_id=prompt_message.message_id)
    await callback.answer()

@router.message(OrderStates.editing_order)
async def process_edit_input(message: types.Message, state: FSMContext):
    data = await state.get_data()
    editing_field = data.get('editing_field')
    last_edit_message_id = data.get('last_edit_message_id')
    last_info_id = data.get('last_info_message_id') # The original summary message
    bot = message.bot
    chat_id = message.chat.id

    if last_edit_message_id:
        try:
            await bot.delete_message(chat_id, last_edit_message_id)
        except: pass
    
    user_text = message.text
    try:
        await message.delete()
    except:
        pass

    if user_text == "üîô –ù–∞–∑–∞–¥":
        # Since we deleted the original summary, we must send a new one
        await show_order_summary(message, state) # `message` is deleted but obj can be used for context
        return
    
    if user_text == "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏":
        await state.clear()
        await bot.send_message(chat_id, "–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=get_main_menu_keyboard())
        return
    
    # Validator function mapping
    validation_functions = {
        "topic": validate_topic,
        "subject": validate_subject,
        "deadline": validate_deadline,
        "volume": validate_volume,
        "requirements": validate_requirements
    }

    validator = validation_functions.get(editing_field)
    if validator:
        is_valid, error_message = validator(user_text)
        if not is_valid:
            # Delete previous error message if any
            if data.get('edit_error_id'):
                try: await bot.delete_message(chat_id, data.get('edit_error_id'))
                except: pass

            sent_error = await bot.send_message(chat_id, f"‚ö†Ô∏è {error_message}")
            
            # Resend prompt
            field_names = {
                "topic": "—Ç–µ–º—É", "subject": "–ø—Ä–µ–¥–º–µ—Ç", "deadline": "—Ç–µ—Ä–º—ñ–Ω",
                "volume": "–æ–±—Å—è–≥", "requirements": "–≤–∏–º–æ–≥–∏"
            }
            keyboard = get_back_keyboard()
            prompt = await bot.send_message(chat_id, f"–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π {field_names.get(editing_field, '–ø–∞—Ä–∞–º–µ—Ç—Ä')}:", reply_markup=keyboard)
            
            await state.update_data(last_edit_message_id=prompt.message_id, edit_error_id=sent_error.message_id)
            return

    await state.update_data(**{editing_field: user_text})
    
    # –ü–µ—Ä–µ—Ä–∞—Ö–æ–≤—É—î–º–æ —Ü—ñ–Ω—É –ø—ñ—Å–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è
    new_data = await state.get_data()
    price, discount = calculate_price(new_data)
    await state.update_data(price=price, discount=discount)

    await state.update_data(editing_field=None)
    # Since the original summary was deleted, send a new one.
    # The `message` object is already deleted, but we can still use it for context (bot, chat)
    await show_order_summary(message, state, should_edit=False)