import json
import os
from aiogram import types, Router
from aiogram.filters import Command
from aiogram import Bot
from app.config import Config, ORDER_STATUSES, STATUS_COLORS, SPAM_LIMITS
# from app.handlers.feedback import request_feedback
from collections import Counter
from datetime import datetime, timedelta
from app.db import (
    get_orders, get_order_by_num, find_orders, update_order_status, 
    add_promocode, get_promocode, get_promocode_usages, get_order_by_id,
    create_backup, check_spam_protection, log_message
)
import re
from aiogram.filters.command import CommandObject
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from app.utils.validation import delete_previous_messages, delete_all_tracked_messages, is_command

router = Router()

class BroadcastStates(StatesGroup):
    waiting_for_message = State()
    waiting_for_confirmation = State()

def get_admin_keyboard():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
            [InlineKeyboardButton(text="üì¢ –ú–∞—Å–æ–≤—ñ —Ä–æ–∑—Å–∏–ª–∫–∏", callback_data="admin_broadcast")],
            [InlineKeyboardButton(text="üíæ –°—Ç–≤–æ—Ä–∏—Ç–∏ –±–µ–∫–∞–ø", callback_data="admin_backup")],
            [InlineKeyboardButton(text="üé´ –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏", callback_data="admin_promos")],
            [InlineKeyboardButton(text="üîß –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è", callback_data="admin_settings")]
        ]
    )

@router.message(Command("cabinet"))
async def cabinet_handler(message: types.Message, state: FSMContext):
    await delete_all_tracked_messages(message.bot, message.chat.id, state)
    await state.update_data(last_user_message_id=message.message_id)
    user_id = message.from_user.id
    try:
        data = await state.get_data()
        last_info_id = data.get('last_info_message_id')
        if last_info_id:
            try:
                await message.bot.delete_message(message.chat.id, last_info_id)
            except: pass
        try:
            await message.delete()
        except Exception as del_exc:
            print(f"[WARNING] /cabinet: –Ω–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {del_exc}")
        if user_id in Config.ADMIN_IDS:
            print(f"[INFO] /cabinet: admin {user_id} - –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ /cabinet_ad")
            sent = await message.answer("‚ùóÔ∏è –î–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /cabinet_ad", parse_mode="HTML")
            await state.update_data(last_info_message_id=sent.message_id)
            return
        # –ó–≤–∏—á–∞–π–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á
        orders = get_orders(user_id=user_id)
        if not orders:
            print(f"[INFO] /cabinet: user {user_id} - –Ω–µ–º–∞—î –∑–∞–º–æ–≤–ª–µ–Ω—å")
            sent = await message.answer(
                "üìã <b>–ú–æ—ó –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è</b>\n\n"
                "–£ –≤–∞—Å –ø–æ–∫–∏ –Ω–µ–º–∞—î –∑–∞–º–æ–≤–ª–µ–Ω—å.\n"
                "–°—Ç–≤–æ—Ä—ñ—Ç—å –ø–µ—Ä—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∫–æ–º–∞–Ω–¥–æ—é /order",
                parse_mode="HTML"
            )
            await state.update_data(last_info_message_id=sent.message_id)
            return
        text = "üìã <b>–ú–æ—ó –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:</b>\n\n"
        for order in orders[:10]:  # –ü–æ–∫–∞–∑—É—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ 10
            order_id, _, _, _, _, type_label, _, topic, _, deadline, _, _, _, price, status, created_at = order[:16]
            status_emoji = STATUS_COLORS.get(status, "‚ö™")
            status_text = ORDER_STATUSES.get(status, status)
            text += f"{status_emoji} <b>#{order_id}</b> - {type_label}\n"
            text += f"üìñ {topic[:50]}{'...' if len(topic) > 50 else ''}\n"
            text += f"üí∞ {price} –≥—Ä–Ω | üìÖ {deadline}\n"
            text += f"üìä –°—Ç–∞—Ç—É—Å: {status_text}\n\n"
        if len(orders) > 10:
            text += f"... —Ç–∞ —â–µ {len(orders) - 10} –∑–∞–º–æ–≤–ª–µ–Ω—å"
        sent = await message.answer(text, parse_mode="HTML", reply_markup=None)
        await state.update_data(last_bot_message_id=sent.message_id)
        print(f"[INFO] /cabinet: user {user_id} - –ø–æ–∫–∞–∑–∞–Ω–æ {len(orders)} –∑–∞–º–æ–≤–ª–µ–Ω—å")
    except Exception as e:
        print(f"[ERROR] /cabinet: user {user_id} - {e}")
        sent = await message.answer("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∫–∞–±—ñ–Ω–µ—Ç—É.")
        await state.update_data(last_bot_message_id=sent.message_id)

@router.message(Command("cabinet_ad"))
async def cabinet_admin_handler(message: types.Message):
    user_id = message.from_user.id
    try:
        await message.delete()
    except Exception as del_exc:
        print(f"[WARNING] /cabinet_ad: –Ω–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {del_exc}")
    if user_id not in Config.ADMIN_IDS:
        print(f"[ERROR] /cabinet_ad: user {user_id} –Ω–µ —î –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
        await message.answer("‚õîÔ∏è –î–æ—Å—Ç—É–ø –ª–∏—à–µ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞", parse_mode="HTML")
        return
    keyboard = get_admin_keyboard()
    await message.answer(
        "üîß <b>–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∏–π –∫–∞–±—ñ–Ω–µ—Ç</b>\n\n"
        "–û–±–µ—Ä—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é:",
        parse_mode="HTML",
        reply_markup=keyboard
    )
    print(f"[INFO] /cabinet_ad: admin {user_id} - –≤—ñ–¥–∫—Ä–∏—Ç–æ –∞–¥–º—ñ–Ω-–∫–∞–±—ñ–Ω–µ—Ç")

@router.callback_query(lambda c: c.data == "admin_stats")
async def admin_stats_callback(callback: types.CallbackQuery):
    if callback.from_user.id not in Config.ADMIN_IDS:
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ")
        return
    
    # –ó–±–∏—Ä–∞—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    all_orders = get_orders()
    total_orders = len(all_orders)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å—Ç–∞—Ç—É—Å–∞–º–∏
    status_counts = Counter(order[14] for order in all_orders)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Ç–∏–ø–∞–º–∏
    type_counts = Counter(order[5] for order in all_orders)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 7 –¥–Ω—ñ–≤
    week_ago = datetime.now() - timedelta(days=7)
    recent_orders = [order for order in all_orders 
                    if datetime.fromisoformat(order[15]) > week_ago]
    
    # –ó–∞–≥–∞–ª—å–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å
    total_revenue = sum(order[13] for order in all_orders if order[13])
    
    stats_text = f"""
üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>

üìà <b>–ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –í—Å—å–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω—å: {total_orders}
‚Ä¢ –ó–∞–≥–∞–ª—å–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å: {total_revenue} –≥—Ä–Ω
‚Ä¢ –ó–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 7 –¥–Ω—ñ–≤: {len(recent_orders)}

üìã <b>–ó–∞ —Å—Ç–∞—Ç—É—Å–∞–º–∏:</b>
"""
    
    for status, count in status_counts.most_common():
        status_emoji = STATUS_COLORS.get(status, "‚ö™")
        status_text = ORDER_STATUSES.get(status, status)
        stats_text += f"{status_emoji} {status_text}: {count}\n"
    
    stats_text += "\nüìù <b>–ó–∞ —Ç–∏–ø–∞–º–∏ —Ä–æ–±—ñ—Ç:</b>\n"
    for order_type, count in type_counts.most_common():
        stats_text += f"‚Ä¢ {order_type}: {count}\n"
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üìä –ï–∫—Å–ø–æ—Ä—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", callback_data="export_stats")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_admin")]
        ]
    )
    
    await callback.message.edit_text(stats_text, parse_mode="HTML", reply_markup=keyboard)
    await callback.answer()

@router.callback_query(lambda c: c.data == "admin_broadcast")
async def admin_broadcast_callback(callback: types.CallbackQuery, state: FSMContext):
    if callback.from_user.id not in Config.ADMIN_IDS:
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ")
        return
    
    await state.set_state(BroadcastStates.waiting_for_message)
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_admin")]]
    )
    await callback.message.edit_text(
        "üì¢ <b>–ú–∞—Å–æ–≤—ñ —Ä–æ–∑—Å–∏–ª–∫–∏</b>\n\n"
        "–ù–∞–¥—ñ—à–ª—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏.\n"
        "–ü—ñ–¥—Ç—Ä–∏–º—É—é—Ç—å—Å—è: —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –≤—ñ–¥–µ–æ, –¥–æ–∫—É–º–µ–Ω—Ç–∏\n\n"
        "–î–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –Ω–∞–ø–∏—à—ñ—Ç—å /cancel",
        parse_mode="HTML",
        reply_markup=keyboard
    )
    await callback.answer()

@router.message(BroadcastStates.waiting_for_message)
async def process_broadcast_message(message: types.Message, state: FSMContext):
    if message.text == "/cancel":
        await state.clear()
        await message.answer("–†–æ–∑—Å–∏–ª–∫–∞ —Å–∫–∞—Å–æ–≤–∞–Ω–∞")
        return
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    await state.update_data(
        message_type=message.content_type,
        text=message.text if message.text else message.caption,
        file_id=message.document.file_id if message.document else None,
        photo_id=message.photo[-1].file_id if message.photo else None,
        video_id=message.video.file_id if message.video else None
    )
    
    # –ü–æ–∫–∞–∑—É—î–º–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", callback_data="confirm_broadcast")],
            [InlineKeyboardButton(text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="cancel_broadcast")]
        ]
    )
    
    preview_text = f"""
üì¢ <b>–ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø–µ—Ä–µ–≥–ª—è–¥ —Ä–æ–∑—Å–∏–ª–∫–∏:</b>

{message.text or message.caption or '–ú–µ–¥—ñ–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è'}

---
–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏: {len(set(order[1] for order in get_orders()))}
"""
    
    await message.answer(preview_text, parse_mode="HTML", reply_markup=keyboard)
    await state.set_state(BroadcastStates.waiting_for_confirmation)

@router.callback_query(lambda c: c.data == "confirm_broadcast")
async def confirm_broadcast_callback(callback: types.CallbackQuery, state: FSMContext):
    if callback.from_user.id not in Config.ADMIN_IDS:
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ")
        return
    
    data = await state.get_data()
    
    # –û—Ç—Ä–∏–º—É—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
    orders = get_orders()
    users = set(order[1] for order in orders)
    
    sent_count = 0
    failed_count = 0
    
    for user_id in users:
        try:
            if data['message_type'] == 'text':
                await callback.bot.send_message(user_id, data['text'], parse_mode="HTML")
            elif data['message_type'] == 'document':
                await callback.bot.send_document(user_id, data['file_id'], caption=data['text'])
            elif data['message_type'] == 'photo':
                await callback.bot.send_photo(user_id, data['photo_id'], caption=data['text'])
            elif data['message_type'] == 'video':
                await callback.bot.send_video(user_id, data['video_id'], caption=data['text'])
            
            sent_count += 1
            
        except Exception as e:
            failed_count += 1
            print(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_id}: {e}")
    
    await callback.message.edit_text(
        f"‚úÖ <b>–†–æ–∑—Å–∏–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
        f"üì§ –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}\n"
        f"‚ùå –ü–æ–º–∏–ª–∫–∏: {failed_count}\n"
        f"üìä –í—Å—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {len(users)}",
        parse_mode="HTML"
    )
    
    await state.clear()
    await callback.answer()

@router.callback_query(lambda c: c.data == "admin_backup")
async def admin_backup_callback(callback: types.CallbackQuery):
    if callback.from_user.id not in Config.ADMIN_IDS:
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ")
        return
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_admin")]]
    )
    try:
        backup_file = create_backup()
        await callback.message.edit_text(
            f"‚úÖ <b>–ë–µ–∫–∞–ø —Å—Ç–≤–æ—Ä–µ–Ω–æ!</b>\n\n"
            f"üìÅ –§–∞–π–ª: {backup_file}\n"
            f"üìÖ –ß–∞—Å: {datetime.now().strftime('%d.%m.%Y %H:%M')}",
            parse_mode="HTML",
            reply_markup=keyboard
        )
    except Exception as e:
        await callback.message.edit_text(
            f"‚ùå <b>–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –±–µ–∫–∞–ø—É:</b>\n{str(e)}",
            parse_mode="HTML",
            reply_markup=keyboard
        )
    
    await callback.answer()

@router.callback_query(lambda c: c.data == "admin_promos")
async def admin_promos_callback(callback: types.CallbackQuery):
    if callback.from_user.id not in Config.ADMIN_IDS:
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ")
        return
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚ûï –î–æ–¥–∞—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥", callback_data="add_promo")],
            [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤", callback_data="promo_stats")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_admin")]
        ]
    )
    
    await callback.message.edit_text(
        "üé´ <b>–£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏</b>\n\n"
        "–û–±–µ—Ä—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é:",
        parse_mode="HTML",
        reply_markup=keyboard
    )
    await callback.answer()

@router.callback_query(lambda c: c.data == "promo_stats")
async def promo_stats_callback(callback: types.CallbackQuery):
    if callback.from_user.id not in Config.ADMIN_IDS:
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ")
        return
    
    # –û—Ç—Ä–∏–º—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤
    promocodes = []
    import sqlite3
    conn = sqlite3.connect('botdata.sqlite3')
    c = conn.cursor()
    c.execute('SELECT * FROM promocodes')
    promocodes = c.fetchall()
    conn.close()
    
    if not promocodes:
        await callback.message.edit_text(
            "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤</b>\n\n"
            "–ü—Ä–æ–º–æ–∫–æ–¥—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.",
            parse_mode="HTML"
        )
        return
    
    stats_text = "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤:</b>\n\n"
    
    for promo in promocodes:
        code, discount_type, discount_value, usage_limit, used_count, created_at, expires_at, is_personal, personal_user_id, min_order_amount = promo
        
        stats_text += f"üé´ <b>{code}</b>\n"
        stats_text += f"üí∞ {discount_value} {'%' if discount_type == 'percent' else '–≥—Ä–Ω'}\n"
        stats_text += f"üìä –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ: {used_count}/{usage_limit or '‚àû'}\n"
        
        if expires_at:
            stats_text += f"‚è∞ –î—ñ—î –¥–æ: {expires_at[:10]}\n"
        
        if is_personal:
            stats_text += f"üë§ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π –¥–ª—è: {personal_user_id}\n"
        
        if min_order_amount:
            stats_text += f"üí≥ –ú—ñ–Ω. —Å—É–º–∞: {min_order_amount} –≥—Ä–Ω\n"
        
        stats_text += "\n"
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_promos")]
        ]
    )
    
    await callback.message.edit_text(stats_text, parse_mode="HTML", reply_markup=keyboard)
    await callback.answer()

@router.callback_query(lambda c: c.data == "back_to_admin")
async def back_to_admin_callback(callback: types.CallbackQuery):
    if callback.from_user.id not in Config.ADMIN_IDS:
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ")
        return
    
    keyboard = get_admin_keyboard()
    await callback.message.edit_text(
        "üîß <b>–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∏–π –∫–∞–±—ñ–Ω–µ—Ç</b>\n\n"
        "–û–±–µ—Ä—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é:",
        parse_mode="HTML",
        reply_markup=keyboard
    )
    await callback.answer()

# –Ü–Ω—à—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –∑–∞–ª–∏—à–∞—é—Ç—å—Å—è –±–µ–∑ –∑–º—ñ–Ω
@router.message(Command("orders"))
async def orders_handler(message: types.Message, state: FSMContext):
    if message.from_user.id not in Config.ADMIN_IDS:
        return
    try:
        await message.delete()
    except Exception as del_exc:
        print(f"[WARNING] /orders: –Ω–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {del_exc}")
    data = await state.get_data()
    last_info_id = data.get('last_info_message_id')
    if last_info_id:
        try:
            await message.bot.delete_message(message.chat.id, last_info_id)
        except: pass
    orders = get_orders()
    
    if not orders:
        sent = await message.answer("–ó–∞–º–æ–≤–ª–µ–Ω—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        await state.update_data(last_info_message_id=sent.message_id)
        return
    
    text = f"üìã <b>–í—Å—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ({len(orders)}):</b>\n\n"
    
    for order in orders[:20]:  # –ü–æ–∫–∞–∑—É—î–º–æ –ø–µ—Ä—à—ñ 20
        order_id, user_id, first_name, username, _, type_label, _, topic, _, deadline, _, _, _, price, status, created_at = order[:16]
        
        status_emoji = STATUS_COLORS.get(status, "‚ö™")
        status_text = ORDER_STATUSES.get(status, status)
        
        text += f"{status_emoji} <b>#{order_id}</b> - {type_label}\n"
        text += f"üë§ {first_name} (@{username})\n"
        text += f"üìñ {topic[:50]}{'...' if len(topic) > 50 else ''}\n"
        text += f"üí∞ {price} –≥—Ä–Ω | üìÖ {deadline}\n"
        text += f"üìä –°—Ç–∞—Ç—É—Å: {status_text}\n\n"
    
    if len(orders) > 20:
        text += f"... —Ç–∞ —â–µ {len(orders) - 20} –∑–∞–º–æ–≤–ª–µ–Ω—å"
    sent = await message.answer(text, parse_mode="HTML")
    await state.update_data(last_info_message_id=sent.message_id)

@router.message(Command("order"))
async def order_detail_handler(message: types.Message, command: CommandObject, state: FSMContext):
    if message.from_user.id not in Config.ADMIN_IDS:
        return
    try:
        await message.delete()
    except Exception as del_exc:
        print(f"[WARNING] /order: –Ω–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {del_exc}")
    data = await state.get_data()
    last_info_id = data.get('last_info_message_id')
    if last_info_id:
        try:
            await message.bot.delete_message(message.chat.id, last_info_id)
        except: pass
    if not command.args:
        sent = await message.answer("–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /order <–Ω–æ–º–µ—Ä>")
        await state.update_data(last_info_message_id=sent.message_id)
        return
    
    try:
        order_num = int(command.args)
        order_data = get_order_by_id(order_num)
        
        if not order_data:
            sent = await message.answer(f"–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order_num} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
            await state.update_data(last_info_message_id=sent.message_id)
            return
        
        order = order_data['order']
        files = order_data['files']
        status_history = order_data['status_history']
        
        order_id, user_id, first_name, username, phone, type_label, order_type, topic, subject, deadline, volume, requirements, files_json, price, status, created_at, updated_at, confirmed_at, manager_id, notes = order
        
        status_emoji = STATUS_COLORS.get(status, "‚ö™")
        status_text = ORDER_STATUSES.get(status, status)
        
        text = f"""
üìã <b>–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order_id}</b>

üë§ <b>–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á:</b>
‚Ä¢ –Ü–º'—è: {first_name}
‚Ä¢ Username: @{username}
‚Ä¢ ID: {user_id}
‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: {phone}

üìù <b>–î–µ—Ç–∞–ª—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:</b>
‚Ä¢ –¢–∏–ø: {type_label}
‚Ä¢ –¢–µ–º–∞: {topic}
‚Ä¢ –ü—Ä–µ–¥–º–µ—Ç: {subject}
‚Ä¢ –¢–µ—Ä–º—ñ–Ω: {deadline}
‚Ä¢ –û–±—Å—è–≥: {volume}
‚Ä¢ –í–∏–º–æ–≥–∏: {requirements}

üí∞ <b>–§—ñ–Ω–∞–Ω—Å–∏:</b>
‚Ä¢ –¶—ñ–Ω–∞: {price} –≥—Ä–Ω
‚Ä¢ –°—Ç–∞—Ç—É—Å: {status_emoji} {status_text}

üìé <b>–§–∞–π–ª–∏:</b> {len(files)} —à—Ç.

üìÖ <b>–î–∞—Ç–∏:</b>
‚Ä¢ –°—Ç–≤–æ—Ä–µ–Ω–æ: {created_at[:10]}
‚Ä¢ –û–Ω–æ–≤–ª–µ–Ω–æ: {updated_at[:10] if updated_at else '–ù—ñ'}

üìù <b>–ü—Ä–∏–º—ñ—Ç–∫–∏:</b> {notes or '–ù–µ–º–∞—î'}
"""
        
        # –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –¥–ª—è –∑–º—ñ–Ω–∏ —Å—Ç–∞—Ç—É—Å—É
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text=f"{emoji} {text}", callback_data=f"set_status:{order_id}:{status_code}")]
                for status_code, text in ORDER_STATUSES.items()
            ] + [
                [InlineKeyboardButton(text="üí¨ –ù–∞–ø–∏—Å–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É", callback_data=f"msg_user:{user_id}")],
                [InlineKeyboardButton(text="üìä –Ü—Å—Ç–æ—Ä—ñ—è —Å—Ç–∞—Ç—É—Å—ñ–≤", callback_data=f"status_history:{order_id}")]
            ]
        )
        
        sent = await message.answer(text, parse_mode="HTML", reply_markup=keyboard)
        await state.update_data(last_info_message_id=sent.message_id)
        
    except ValueError:
        sent = await message.answer("–ù–µ–≤—ñ—Ä–Ω–∏–π –Ω–æ–º–µ—Ä –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.")
        await state.update_data(last_info_message_id=sent.message_id)

@router.message(Command("setstatus"))
async def set_status_handler(message: types.Message, command: CommandObject, state: FSMContext):
    if message.from_user.id not in Config.ADMIN_IDS:
        return
    try:
        await message.delete()
    except Exception as del_exc:
        print(f"[WARNING] /setstatus: –Ω–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {del_exc}")
    data = await state.get_data()
    last_info_id = data.get('last_info_message_id')
    if last_info_id:
        try:
            await message.bot.delete_message(message.chat.id, last_info_id)
        except: pass
    args = command.args.split('_')
    if len(args) != 2:
        sent = await message.answer("–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /setstatus <–Ω–æ–º–µ—Ä>_<—Å—Ç–∞—Ç—É—Å>")
        await state.update_data(last_info_message_id=sent.message_id)
        return
    
    try:
        order_id = int(args[0])
        new_status = args[1]
        
        if new_status not in ORDER_STATUSES:
            sent = await message.answer(f"–ù–µ–≤—ñ—Ä–Ω–∏–π —Å—Ç–∞—Ç—É—Å. –î–æ—Å—Ç—É–ø–Ω—ñ: {', '.join(ORDER_STATUSES.keys())}")
            await state.update_data(last_info_message_id=sent.message_id)
            return
        
        update_order_status(order_id, new_status, message.from_user.id, "–ó–º—ñ–Ω–µ–Ω–æ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É")
        
        sent = await message.answer(f"‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order_id} –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ '{ORDER_STATUSES[new_status]}'")
        await state.update_data(last_info_message_id=sent.message_id)
        
    except ValueError:
        sent = await message.answer("–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥–∏.")
        await state.update_data(last_info_message_id=sent.message_id)

@router.message(Command("stats"))
async def stats_handler(message: types.Message, state: FSMContext):
    if message.from_user.id not in Config.ADMIN_IDS:
        return
    try:
        await message.delete()
    except Exception as del_exc:
        print(f"[WARNING] /stats: –Ω–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {del_exc}")
    data = await state.get_data()
    last_info_id = data.get('last_info_message_id')
    if last_info_id:
        try:
            await message.bot.delete_message(message.chat.id, last_info_id)
        except: pass
    orders = get_orders()
    
    if not orders:
        sent = await message.answer("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ - –Ω–µ–º–∞—î –∑–∞–º–æ–≤–ª–µ–Ω—å.")
        await state.update_data(last_info_message_id=sent.message_id)
        return
    
    # –ë–∞–∑–æ–≤–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_orders = len(orders)
    total_revenue = sum(order[13] for order in orders if order[13])
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å—Ç–∞—Ç—É—Å–∞–º–∏
    status_counts = Counter(order[14] for order in orders)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 7 –¥–Ω—ñ–≤
    week_ago = datetime.now() - timedelta(days=7)
    recent_orders = [order for order in orders 
                    if datetime.fromisoformat(order[15]) > week_ago]
    
    text = f"""
üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>

üìà <b>–ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –í—Å—å–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω—å: {total_orders}
‚Ä¢ –ó–∞–≥–∞–ª—å–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å: {total_revenue} –≥—Ä–Ω
‚Ä¢ –ó–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 7 –¥–Ω—ñ–≤: {len(recent_orders)}

üìã <b>–ó–∞ —Å—Ç–∞—Ç—É—Å–∞–º–∏:</b>
"""
    
    for status, count in status_counts.most_common():
        status_emoji = STATUS_COLORS.get(status, "‚ö™")
        status_text = ORDER_STATUSES.get(status, status)
        text += f"{status_emoji} {status_text}: {count}\n"
    
    sent = await message.answer(text, parse_mode="HTML")
    await state.update_data(last_info_message_id=sent.message_id)

@router.message(Command("addpromo"))
async def add_promo_handler(message: types.Message, command: CommandObject, state: FSMContext):
    if message.from_user.id not in Config.ADMIN_IDS:
        return
    try:
        await message.delete()
    except Exception as del_exc:
        print(f"[WARNING] /addpromo: –Ω–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {del_exc}")
    data = await state.get_data()
    last_info_id = data.get('last_info_message_id')
    if last_info_id:
        try:
            await message.bot.delete_message(message.chat.id, last_info_id)
        except: pass
    args = command.args.split('_')
    if len(args) < 4:
        sent = await message.answer("–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /addpromo <–∫–æ–¥>_<—Ç–∏–ø>_<–∑–Ω–∞—á–µ–Ω–Ω—è>_<–ª—ñ–º—ñ—Ç>_[—Ç–µ—Ä–º—ñ–Ω_–¥—ñ—ó]")
        await state.update_data(last_info_message_id=sent.message_id)
        return
    
    try:
        code = args[0].upper()
        discount_type = args[1]
        discount_value = int(args[2])
        usage_limit = int(args[3])
        expires_at = args[4] if len(args) > 4 else None
        
        add_promocode(code, discount_type, discount_value, usage_limit, expires_at)
        
        sent = await message.answer(f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ {code} –¥–æ–¥–∞–Ω–æ!")
        await state.update_data(last_info_message_id=sent.message_id)
        
    except (ValueError, IndexError):
        sent = await message.answer("–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥–∏.")
        await state.update_data(last_info_message_id=sent.message_id)

@router.message(Command("promos"))
async def promos_handler(message: types.Message, state: FSMContext):
    if message.from_user.id not in Config.ADMIN_IDS:
        return
    try:
        await message.delete()
    except Exception as del_exc:
        print(f"[WARNING] /promos: –Ω–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {del_exc}")
    data = await state.get_data()
    last_info_id = data.get('last_info_message_id')
    if last_info_id:
        try:
            await message.bot.delete_message(message.chat.id, last_info_id)
        except: pass
    # –û—Ç—Ä–∏–º—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤
    promocodes = []
    import sqlite3
    conn = sqlite3.connect('botdata.sqlite3')
    c = conn.cursor()
    c.execute('SELECT * FROM promocodes')
    promocodes = c.fetchall()
    conn.close()
    
    if not promocodes:
        sent = await message.answer("–ü—Ä–æ–º–æ–∫–æ–¥—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        await state.update_data(last_info_message_id=sent.message_id)
        return
    
    text = "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤:</b>\n\n"
    
    for promo in promocodes:
        code, discount_type, discount_value, usage_limit, used_count, created_at, expires_at, is_personal, personal_user_id, min_order_amount = promo
        
        text += f"üé´ <b>{code}</b>\n"
        text += f"üí∞ {discount_value} {'%' if discount_type == 'percent' else '–≥—Ä–Ω'}\n"
        text += f"üìä –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ: {used_count}/{usage_limit or '‚àû'}\n"
        
        if expires_at:
            text += f"‚è∞ –î—ñ—î –¥–æ: {expires_at[:10]}\n"
        
        text += "\n"
    
    sent = await message.answer(text, parse_mode="HTML")
    await state.update_data(last_info_message_id=sent.message_id)

@router.message(Command("feedbacks"))
async def feedbacks_handler(message: types.Message, state: FSMContext):
    if message.from_user.id not in Config.ADMIN_IDS:
        return
    try:
        await message.delete()
    except Exception as del_exc:
        print(f"[WARNING] /feedbacks: –Ω–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {del_exc}")
    data = await state.get_data()
    last_info_id = data.get('last_info_message_id')
    if last_info_id:
        try:
            await message.bot.delete_message(message.chat.id, last_info_id)
        except: pass
    # –û—Ç—Ä–∏–º—É—î–º–æ –≤—ñ–¥–≥—É–∫–∏
    feedbacks = []
    import sqlite3
    conn = sqlite3.connect('botdata.sqlite3')
    c = conn.cursor()
    c.execute('SELECT * FROM feedbacks ORDER BY created_at DESC')
    feedbacks = c.fetchall()
    conn.close()
    
    if not feedbacks:
        sent = await message.answer("–í—ñ–¥–≥—É–∫—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        await state.update_data(last_info_message_id=sent.message_id)
        return
    
    text = f"üìù <b>–í—Å—ñ –≤—ñ–¥–≥—É–∫–∏ ({len(feedbacks)}):</b>\n\n"
    
    for feedback in feedbacks[:10]:  # –ü–æ–∫–∞–∑—É—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ 10
        feedback_id, user_id, username, text_content, stars, created_at = feedback
        
        text += f"‚≠ê <b>{'‚≠ê' * stars}{'‚òÜ' * (5 - stars)}</b>\n"
        text += f"üë§ @{username} (ID: {user_id})\n"
        text += f"üìù {text_content[:100]}{'...' if len(text_content) > 100 else ''}\n"
        text += f"üìÖ {created_at[:10]}\n\n"
    
    if len(feedbacks) > 10:
        text += f"... —Ç–∞ —â–µ {len(feedbacks) - 10} –≤—ñ–¥–≥—É–∫—ñ–≤"
    
    sent = await message.answer(text, parse_mode="HTML")
    await state.update_data(last_info_message_id=sent.message_id)

@router.callback_query(lambda c: c.data == "user_stats")
async def user_stats_callback(callback: types.CallbackQuery):
    try:
        # –¢—É—Ç –º–æ–∂–Ω–∞ —Ä–µ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ —Ä–µ–∞–ª—å–Ω—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        await callback.message.answer("üìä –î–µ—Ç–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±—É–¥–µ –¥–æ—Å—Ç—É–ø–Ω–∞ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º.")
        await callback.answer()
        print(f"[INFO] –ö–∞–±—ñ–Ω–µ—Ç: –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á {callback.from_user.id} –Ω–∞—Ç–∏—Å–Ω—É–≤ '–î–µ—Ç–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'")
    except Exception as e:
        print(f"[ERROR] –ö–∞–±—ñ–Ω–µ—Ç: user_stats –¥–ª—è {callback.from_user.id} - {e}")
        await callback.message.answer("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
        await callback.answer() 